#!/usr/bin/env julia

# This script generates the table published at https://julialang.org/benchmarks/
# (file _includes/benchmarks.html in the JuliaLang/julialang.github.com repository)

const data = Dict{String,Dict{String,Float64}}()

for arg in ARGS, line in eachline(arg)
    lang, bench, time_str = split(line, ',')
    times = get!(data, bench, Dict{String,Float64}())
    times[lang] = parse(Float64, time_str)
end

const JULIAHOME = ENV["JULIAHOME"]

readver(cmds...) = readchomp(pipeline(`sh -c "$(Base.shell_escape(cmds[1])) 2>&1"`, cmds[2:end]...))

c_ver() = readver(`gcc -v`, `grep "gcc version"`, `cut -f3 -d" "`)
julia_ver() = readver(`$JULIAHOME/usr/bin/julia -v`, `cut -f3 -d" "`)
fortran_ver() = readver(`gfortran -v`, `grep "gcc version"`, `cut -f3 -d" "`)
python_ver() = readver(`python3 -V`, `cut -f2 -d" "`)
matlab_ver() = readver(`matlab -nodisplay -nojvm -nosplash -r "version -release, quit"`, `tail -n 3`, `head -n 1`)
R_ver() = readver(`R --version`, `grep "R version"`, `cut -f3 -d" "`)
octave_ver() = readver(`octave -v`, `grep version`, `cut -f4 -d" "`)
go_ver() = readver(`go version`, `cut -f3 -d" "`)
lua_ver() = readver(`scilua -v`, `grep Shell`, `cut -f3 -d" "`, `cut -f1 -d,`)
lua_ver() = "scilua v1.0.0-b12" # scilua has no run-time versioninfo function
javascript_ver() = readver(`nodejs -e "console.log(process.versions.v8)"`)
mathematica_ver() = readver(`echo quit`, `math -version`, `head -n 1`, `cut -f2 -d" "`)
java_ver() = readver(`java -version`, `grep "version"`, `cut -f3 -d " "`, `cut -c 2-9`)
rust_ver() = cd("rust") do
    readver(`rustc --version`, `cut -c 7-`, `sed 's/ ([0-9a-f]* /<br>(/g'`)
end

const systems = Dict{String,Tuple{String,String}}(
    "c"          => ("C"                , "gcc $(c_ver())"),
    "julia"      => ("Julia"            , julia_ver()),
    "lua"        => ("LuaJIT"           , lua_ver()),
    "fortran"    => ("Fortran"          , "gcc $(fortran_ver())"),
    "java"       => ("Java"             , java_ver()),
    "javascript" => ("JavaScript"       , "V8 $(javascript_ver())"),
    "matlab"     => ("Matlab"           , "R$(matlab_ver())"),
    "python"     => ("Python"           , python_ver()),
    "mathematica"=> ("Mathe&shy;matica" , mathematica_ver()),
    "r"          => ("R"                , R_ver()),
    "octave"     => ("Octave"           , octave_ver()),
    "go"         => ("Go"               , go_ver()),
    "rust"       => ("Rust"             , rust_ver()),
)

const order = [
    "c",
    "julia",
    "lua",
    "rust",
    "go",
    "fortran",
    "java",
    "javascript",
    "matlab",
    "mathematica",
    "python",
    "r",
    "octave",
]

print("""
<!-- generated by JuliaLang/Microbenchmarks/bin/table.jl -->

<table class="benchmarks">
    <colgroup>
        <col class="name">
        <col class="relative" span="$(length(systems))">
    </colgroup>
    <thead>
        <tr><th></th>
""")

for system in order
    haskey(systems, system) || continue
    println("            <th class=\"system\">$(systems[system][1])</th>")
end

print("""
        </tr>
        <tr><td></td>
""")

for system in order
    haskey(systems, system) || continue
    println("            <th class=\"version\">$(systems[system][2])</th>")
end

print("""
        </tr>
    </thead>
    <tbody>
""")

const benchmarks = [
    "iteration_pi_sum",
    "recursion_fibonacci",
    "recursion_quicksort",
    "parse_integers",
    "print_to_file",
    "matrix_statistics",
    "matrix_multiply",
    "userfunc_mandelbrot",
]

using Printf

for benchmark in benchmarks
    info = data[benchmark]
    println("        <tr><th>$benchmark</th>")
    for system in order
        haskey(systems, system) || continue
        perf = haskey(info, system) ? data[benchmark][system]/data[benchmark]["c"] : NaN
        @printf "\t\t\t<td class=\"data\">%.2f</td>\n" perf
    end
    println("        </tr>")
end

print("""
    </tbody>
</table>

<!-- end of generated table -->
""")
